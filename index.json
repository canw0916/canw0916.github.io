[{"content":"基本数据类型 引言 提问\n前面我们说过，计算机的本质作用就是用来存储和运算二进制的数据。但是在实际应用中，我们看到计算机存储或者运算的数据并非只有二进制的数据，例如使用Excel可以对一些数值数据、文本数据或者图像数据进行不同形式的处理。也就是说计算机可以处理运算的数据有很多不同的种类或者类型。那这不就违背计算机的本质作用了吗？ 在后面讲解了计算机编码后，我们自然就会理解了，后面在聊。 至少，现在我们应该可以感受到，计算机在实际应用中看起来是可以存储和处理不同类型的数据，要是想要使用Python指挥计算机处理不同的数据，则Python需要定义或者规范下不同数据的类型，那么Python中给我们规范了哪些类型的数据呢？ Python数据类型\n在Python的世界，数据类型分两种，内置的和自定义的 内置数据类型\n内置的包括数字、字符串、布尔、列表、元组、字典、Bytes、集合这些常用的。 自定义数据类型\n自定义的，一般以类的形式，根据需要组合以上内置类型成为独特的数据类型。 疑问：大家有没有想过为什么编程语言要设置不同的数据类型吗？\n原因1： 更好的分配管理内存,节省不必要的开支，提高读取速度和运行效率。 原因2： 方便统一管理。这样，我们可以为同一数据类型，提供同样的操作，限制其它不允许的行为。也易于查找错误，定位问题。 原因3： 区分数据类型，更贴切人类对自然事物的分类管理习惯。我们人类对事物都进行了各种分类，植物是植物、动物是动物，书是书，笔是笔。分类了之后，我们很自然的知道书可以读，笔可以写。数据类型也一样，让我们对抽象的数据有了可分辨的行为和自然的记忆。 数字类型 数字类型用于存储和表示数学意义上的数值。\nPython 支持三种不同的数字类型，整数、浮点数和复数\n不可变类型\n数字类型是不可变类型。所谓的不可变类型，指的是类型的值一旦有不同了，那么它就是一个全新的对象。数字1和2分别代表两个不同的对象，对变量重新赋值一个数字类型，会新建一个数字对象。\n例如：\na = 1 #创建数字对象1 a = 2 #创建数字对象2，并将2赋值给变量a，a不再指向数字对象1 这里，发生了变化的是变量a的指向，而不是数字对象1变成了数字对象2。初学者可能会比较迷糊，但不要紧，可以先试着接受。 实验：使用id工具显示1,2,3的内存空间地址\na = 1 print(id(a)) a = 2 print(id(a)) 整数Int\n通常被称为整型，是正或负整数，不带小数点。例如：1，100，-8080，0，等等。 不同进制的整数 表示数字的时候，有时我们还会用八进制或十六进制来表示： 十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2。 八进制用0o前缀和0-7表示，例如0o12 浮点数\n浮点数也就是小数，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，一般用科学计数法表示，把10用e替代，1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。\nsalary = 1.2e5 数字类型转换\n有时候，我们需要对数字的类型进行转换。Python为我们提供了方便的内置的数据类型转换函数。\nint(x)：\n将x转换为一个整数。如果x是个浮点数，则截取小数部分。\na = 10.5 b = int(a) print(b) float(x) ：\n将x转换到一个浮点数。\na = 10 b = float(a) print(b) 数学计算\n对于数学计算，除了前面提到过的简单的加减乘除等等，更多的科学计算需要导入math这个库，它包含了绝大多数我们可能需要的科学计算函数，如下表\n以及两个数学常量：\n布尔类型 真于假、0和1，都是传统意义上的布尔类型。\n但在Python语言中，布尔类型只有两个值，True与False。请注意，是英文单词的对与错，并且首字母要大写，不能其它花式变型。\n所有计算结果返回的结果是True或者False的过程都可以称为布尔运算，例如比较运算。\na = 1 \u0026lt; 2 print(a) False等同于0，True等同于1\na = True + True + False + True print(a) 字符串类型 字符串是由零个或多个字符组成的有限序列。字符串的内容可以包含字母、标点、特殊符号、中文、日文等全世界的所有字符。\n在python中字符串是通过单引号''或者双引号\u0026quot;\u0026quot;标识的。\nname = \u0026#34;bobo\u0026#34; addr = \u0026#39;BeiJing\u0026#39; 字符串特性\n字符串是不可变的序列数据类型，不能直接修改字符串本身，和数字类型一样！Python3全面支持Unicode编码，所有的字符串都是Unicode字符串，所以传统Python2存在的编码问题不再困扰我们，可以放心大胆的使用中文。\n字符串属于序列类型，所谓序列，指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们。\ns = \u0026#34;hello yuan\u0026#34; 序列类型支持的操作：\n#1.索引取值 s = \u0026#39;hello yuan\u0026#39; print(s[3]) #2.切片取值：批量取出多个字符数据。s[start:end],只能取到start到end的前一位区间的字符数据 s = \u0026#39;hello yuan\u0026#39; print(s[0:5]) print(s[0:-1]) print(s[:-1]) print(s[0:]) #3.in运算符检查某一个元素是否存在于一个序列 s = \u0026#39;hello yuan\u0026#39; print(\u0026#39;h\u0026#39; in s) #4.支持加法运算:将两个字符串拼接到了一起 s1 = \u0026#39;hello \u0026#39; s2 = \u0026#39;bobo\u0026#39; s3 = s1 + s2 #字符串的拼接 print(s3) #5.*运算:将字符串叠放多次 s1 = \u0026#39;hello \u0026#39; s2 = s1 * 5 #字符串重叠拼接 print(s2) 字符串运算\n下表实例变量a值为字符串 \u0026ldquo;Hello\u0026rdquo;，b变量值为 \u0026ldquo;Python\u0026rdquo;： python转义字符\n多行字符串\n在字符串中，可以使用三引号（三单或三双引号都可以）编写跨行字符串，在其中可以包含换行符、制表符以及其他特殊字符。\ns = \u0026#39;\u0026#39;\u0026#39; djsfjds fhdjskhfjkds fdhjskdfh \u0026#39;\u0026#39;\u0026#39; print(s) 字符串内置方法\n内置方法有很多，但是我们主要记住如下几个即可： s1 = \u0026#39;hello bobo\u0026#39; s2 = \u0026#39;bobo\u0026#39; s1.find(s2) #返回子串在当前字符串中的位置 #使用Jay替换bobo s1_new = s1.replace(\u0026#39;bobo\u0026#39;,\u0026#39;Jay\u0026#39;) s = \u0026#39;hello-bobo-and-tom\u0026#39; result = s.split(\u0026#39;-\u0026#39;) result s = \u0026#39; hello bobo \\t\\t\\n \u0026#39; print(s.strip()) s = \u0026#39;www.123@qq.com\u0026#39; s.startswith(\u0026#39;www\u0026#39;),s.endswith(\u0026#39;com\u0026#39;) 字符编码\n计算机只能处理数字01，如果要处理文本，就必须先把文本转换为数字01二进制的形式，这种转换方式就称为字符编码。\n对于我们而言，你只需要简单记住下面几种编码就好：\nASCII编码：早期专门为英语语系编码，只有255个字符，每个字符需要8位也就是1个字节。不兼容汉字。 Unicode编码：又称万国码，国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。用2个字节来表示汉字。 UTF-8编码：为了节省字节数，在Unicode的基础上进行优化的编码。天生兼容ASCII编码，所以最为流行。 GB2312：我国早期自己制定的中文编码，世界范围内不通用。 GBK： 全称《汉字内码扩展规范》，向下与GB2312兼容，向上支持ISO10646.1国际标准，是前者向后者过渡过程中的一个承上启下的产物。windows中文版的汉字编码用的就是GBK。也非世界范围通用的编码 其它编码：非以上类型者的统称。属于能不用就不要碰的编码。 ","permalink":"https://canw0916.github.io/posts/tech/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","summary":"基本数据类型 引言 提问 前面我们说过，计算机的本质作用就是用来存储和运算二进制的数据。但是在实际应用中，我们看到计算机存储或者运算的数据并非只有","title":"基本数据类型"},{"content":"运算符 运算符：以1 + 2为例，1和2被称为操作数，“+” 称为运算符。 Python语言支持以下类型的运算符: 算术运算符 比较（关系）运算符 赋值运算符 逻辑运算符 位运算符 成员运算符 身份运算符 算术运算符 a = 10 % 3 b = 2 ** 3 c = 10 // 3 print(c) 比较运算符 对于连续比较，Python是按这种机制解释的： 3\u0026gt;2\u0026gt;1 等于 (3\u0026gt;2) and (2\u0026gt;1) 赋值运算符 位运算符（忽略） 逻辑运算符 成员运算符 身份运算符（后面理解） 运算符优先级 下表列出了从最高到最低优先级的所有运算符。优先级高的运算符优先计算或处理，同级别的按从左往右的顺序计算（赋值运算符除外，它是按从右往左的顺序 输入输出 print输出 print用于将内容格式化显示在标准输出上，主要指的是屏幕显示器\na = 10 print(a) print可以接受多个字符串，字符串类型的变量。每个字符串用逗号“,”隔开，连成一串输出。print会依次打印每个字符串，同时，每遇到一个逗号“,”就输出一个空格。\na = 10 b = 20 name = \u0026#39;bobo\u0026#39; salary = 1000 print(a,b,name,salary) sep和end设置:\nsep表示分隔的符号，默认是一个空格 end表示打印后的结束方式，默认为换行符\\n a = \u0026#39;bobo\u0026#39; b = 20 c = 1.123 print(a,b,c,sep=\u0026#39;+++\u0026#39;) %百分号格式化输出方式\nname = \u0026#39;jay\u0026#39; print(\u0026#39;该名同学的姓名是：%s\u0026#39;%name) age = 20 print(\u0026#39;该名同学的年龄是：%d\u0026#39;%age) 格式化符号:\ninput输入 input可以获取用户输入，保存成一个字符串。一定要注意，input的返回值是一个字符串类型。哪怕你输入的是个数字1，返回给你的只会是字符串“1”，而不是 整数1。\nname = input(\u0026#39;enter your name:\u0026#39;) print(\u0026#39;该名同学的名字：%s\u0026#39;%name) age = input(\u0026#39;enter your age:\u0026#39;) print(\u0026#39;年龄：%s\u0026#39;%age) ","permalink":"https://canw0916.github.io/posts/tech/%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/","summary":"运算符 运算符：以1 + 2为例，1和2被称为操作数，“+” 称为运算符。 Python语言支持以下类型的运算符: 算术运算符 比较（关系）运算符 赋值运算","title":"运算符和输入输出"},{"content":"变量\u0026amp;常量 思考：计算机的本质作用是什么？\n内存空间\n计算机内存，我们可以将其想象成是一个容器，容器中装载的是即将被计算机运算或者处理的数据。 那如果想要将数据成功的加载到内存空间中，则需要确保计算机内存是有足够的空间，则表示数据的存储是需要占用一定大小的内存空间。 且不同的数据或者不同量级的数据占用计算机的内存空间的大小是不一样的。 内存空间大小的度量单位\nbit：位。只可以存储一位二进制的数据。 byte字节：1字节=8bit。 kb：1024字节 mb：1024kb 思考：如果想要计算1+2的结果，Python如何处理呢？\n1.计算机的本质作用是用来存储和运算二进制的数据，因此，先将1and2转换成二进制的值为0001，0010 2.在计算机内存空间中先找出两块内存空间用来存储0001和0010这两个数值数据（在内存中开辟指定的内存空间） 3.Python的解释器会调用计算机的加法寄存器将0001和0010进行加法运算返回结果即可 计算机内存空间默认的两个属性\n内存空间大小 决定了该内存可以存储数据的范围 内存空间地址 让cpu进行寻址。 变量/引用：\n在程序运行过程中，值会发生变化的量（变量）\n变量是一段有名字的连续存储空间。我们通过定义变量来申请并命名这样的存储空间，并通过变量的名字来使用这段存储空间。\n在编程语言中，将数据放入变量的过程叫做赋值（Assignment）。Python 使用等号=作为赋值运算符，具体格式为：\n变量名 = 任意类型的值 例如：\nnum = 100 数学 = 200 常量：\n在程序运行过程中，值不会发生变化的量（常量） 具体的使用：\n1.无论是变量还是常量，在创建时都会在内存中开辟一块空间，用于保存它的值 2.因此所谓的变量其实表示的就是值（加载到内存中的数据）对应的内存空间的一个引用，因此变量也叫做引用 3.Python中的变量不需要声明类型 4.用“=”号来给变量赋值 这里的等号要理解并读作“赋值”，而不是“等于”，“赋值”是对变量的操作，而“等于”是对两个变量进行比较 5.每个变量在使用前都必须赋值，变量赋值以后才会被创建 在python中变量就是引用，引用就是变量。\n指向\n如果一个变量或者一个引用可以表示某一块具体的内存空间，则我们可以称为该变量指向该块内存。 标识符的命名规则\n简单地理解，标识符就是一个名字，就好像我们每个人都有属于自己的名字，它的主要作用就是作为变量、函数、类、模块以及其他对象的名称。Python中标识符的命名不是随意的，而是要遵守一定的命令规则\n标识符是由字符（A~Z 和 a~z）、下划线和数字组成，但第一个字符不能是数字。 标识符不能和 Python 中的保留字相同。有关保留字，后续章节会详细介绍。 Python中的标识符中，不能包含空格、@、% 以及 $ 等特殊字符。 在 Python 中，标识符中的字母是严格区分大小写 Python 语言中，以下划线开头的标识符有特殊含义 Python 允许使用汉字作为标识符（不推荐） Python关键字\nand as assert break class continue def del elif else except finally for from False global if import in is lambda nonlocal not None or pass raise return try True while with yield 缩进\n和其它程序设计语言（如 Java、C 语言）采用大括号“{}”分隔代码块不同，Python 采用冒号（ : ）和代码缩进和来区分代码块之间的层次。在 Python 中，对于类定义、函数定义、流程控制语句、异常处理语句等，行尾的冒号和下一行的缩进，表示下一个代码块的开始，而缩进的结束则表示此代码块的结束。\n注意，Python 中实现对代码的缩进，可以使用空格或者 Tab 键实现。但无论是手动敲空格，还是使用 Tab 键，通常情况下都是采用 4 个空格长度作为一个缩进量（默认情况下，一个 Tab 键就表示 4 个空格）。\n注释：\n注释就是对代码的解释和说明，其目的是让人们能够更加轻松地了解代码。注释是编写程序时，写程序的人给一个语句、程序段、函数等的解释或提示，能提高程序代码的可读性。一般情况下，合理的代码注释应该占源代码的 1/3 左右。\n注释只是为了提高公认阅读，不会被解释器执行。\nPython 支持两种类型的注释，分别是单行注释和多行注释。\n# 单行注释 \u0026#34;\u0026#34;\u0026#34; 这是一个多行注释 三引号里面的任何内容不会被解释器执行 \u0026#34;\u0026#34;\u0026#34; 赋值符号的运算法则\n“=”号这个赋值运算符是从右往左的计算顺序\nPython允许同时为多个变量赋值\n也可以同时为多个变量赋值，用逗号分隔，逐一对应\n不要把赋值语句的等号等同于数学的等号\nname = \u0026#39;bobo\u0026#39; a = b = c = 1 a,b,c = 1,2,3 把一个变量a赋值给另一个变量b，这个操作实际上是将变量b指向变量a所指向的数据，例如下面的代码，思考结果输出的是什么？\na = \u0026#39;Jack\u0026#39; b = a a = \u0026#39;Tom\u0026#39; print(b) 最后变量b的内容到底是\u0026rsquo;Jack\u0026rsquo;还是\u0026rsquo;Tom\u0026rsquo;呢？如果从数学意义上理解，就会错误地得出b和a相同是‘Tom’，但实际上b的值还是\u0026rsquo;Jack ‘!why？如何理解呢？ 请牢记：Python中的一切都是对象，变量是对象的引用！所谓的对象我们在后面的面向对象环节中会详细讲解，现在我们就简单认为Python会把所有的数据都视为是不同的对象即可，数据就是对象，对象就是数据。 执行a = ‘Jack’，解释器创建字符串‘Jack’对象和变量a，并把a指向‘Jack’对象； 执行b = a,解释器创建变量b，并且将其指向变量a指向的字符串‘Jack’对象； 执行a = ‘Tom’,解释器创建字符串‘Tom’对象，并把a改为指向‘Tom’对象，与b无关。 常量\n常量就是不变的变量，比如常用的数学常数圆周率就是一个常量。在Python中，通常用全部大写的变量名表示常量：PI = 3.14159265359 但事实上，从Python语法角度看，PI仍然是一个变量，因为Python根本没有任何机制保证PI不会被改变。你完全可以给PI赋值为10，不会弹出任何错误。所以，用全部大写的变量名表示常量只是一个习惯上的用法。 ","permalink":"https://canw0916.github.io/posts/tech/python%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/","summary":"变量\u0026amp;常量 思考：计算机的本质作用是什么？ 内存空间 计算机内存，我们可以将其想象成是一个容器，容器中装载的是即将被计算机运算或者处理的数","title":"Python的变量和常量"},{"content":" 博客使用了由 Sulv 魔改的PaperMod主题,详细的配置方法可见 :Sulv\u0026rsquo;s Blog\nMac風格的code blocks 在\\themes\\PaperMod\\assets\\css\\extended底下新建一個.css檔，命名為mac-code-blocks.css\npre { position: relative; padding: 30px 10px 10px 10px; } .post-content pre code { font-family: Consolas; } pre::after { display: block; content: \u0026#34; \u0026#34;; position: absolute; border-radius: 50%; background: #ff5f56; width: 12px; height: 12px; top: 0; left: 12px; margin-top: 12px; -webkit-box-shadow: 20px 0 #ffbd2e, 40px 0 #27c93f; box-shadow: 20px 0 #ffbd2e, 40px 0 #27c93f; } [参考链接] 艾倫的程式之旅-Hugo PaperMod 優化 ","permalink":"https://canw0916.github.io/posts/blog/papermod%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/","summary":"博客使用了由 Sulv 魔改的PaperMod主题,详细的配置方法可见 :Sulv\u0026rsquo;s Blog Mac風格的code blocks 在\\themes\\PaperMod\\assets\\cs","title":"PaperMod主题美化"},{"content":" Was mich nicht umbringt, macht mich stärker. \u0026mdash;Friedrich Nietzsche\n","permalink":"https://canw0916.github.io/posts/life/%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80/","summary":"Was mich nicht umbringt, macht mich stärker. \u0026mdash;Friedrich Nietzsche","title":"名人名言"},{"content":"\u003c!DOCTYPE HTML\u003e ","permalink":"https://canw0916.github.io/posts/read/%E4%B8%89%E4%BD%93/","summary":"\u003c!DOCTYPE HTML\u003e","title":"三体"},{"content":" Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群 787018782\n","permalink":"https://canw0916.github.io/links/","summary":"Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文","title":"🤝友链"},{"content":"关于我\n网名: Felix 职业: 黑厂打螺丝的 运动: 跑步、网球、爬山 ","permalink":"https://canw0916.github.io/about/","summary":"关于我 网名: Felix 职业: 黑厂打螺丝的 运动: 跑步、网球、爬山","title":"🙋🏻‍♂️关于"}]