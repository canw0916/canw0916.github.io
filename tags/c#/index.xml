<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>C# - 标签 - 火山不火</title><link>https://canw0916.github.io/tags/c#/</link><description>C# - 标签 - 火山不火</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>canw0916@gmail.com (火山)</managingEditor><webMaster>canw0916@gmail.com (火山)</webMaster><lastBuildDate>Sun, 29 Jan 2023 01:20:50 +0800</lastBuildDate><atom:link href="https://canw0916.github.io/tags/c#/" rel="self" type="application/rss+xml"/><item><title>C#基础提升系列——C#特殊集合</title><link>https://canw0916.github.io/posts/2023/01/csharp%E7%89%B9%E6%AE%8A%E9%9B%86%E5%90%88/</link><pubDate>Sun, 29 Jan 2023 01:20:50 +0800</pubDate><author>火山</author><guid>https://canw0916.github.io/posts/2023/01/csharp%E7%89%B9%E6%AE%8A%E9%9B%86%E5%90%88/</guid><description>C# 特殊集合 C#中的特殊集合主要有： 不可变的集合 并发的集合 位数组合位矢量 可观察的集合 不变的集合 如果对象可以改变其状态，就很难在多个同时运行的任务中使用。这些集合必须同步。如果对象不能改变其状态，就很容易</description></item><item><title>C#基础提升系列——C#集合</title><link>https://canw0916.github.io/posts/2023/01/csharp%E9%9B%86%E5%90%88/</link><pubDate>Sun, 29 Jan 2023 01:20:46 +0800</pubDate><author>火山</author><guid>https://canw0916.github.io/posts/2023/01/csharp%E9%9B%86%E5%90%88/</guid><description>C#集合 有两种主要的集合类型：泛型集合和非泛型集合。 泛型集合被添加在 .NET Framework 2.0 中，并提供编译时类型安全的集合。 因此，泛型集合通常能提供更好的性能。 构造泛型集合时，它们接受类型形参；并在向该集合添加项或从该</description></item><item><title>C#基础提升系列——C#泛型</title><link>https://canw0916.github.io/posts/2023/01/csharp%E6%B3%9B%E5%9E%8B/</link><pubDate>Sun, 29 Jan 2023 01:20:40 +0800</pubDate><author>火山</author><guid>https://canw0916.github.io/posts/2023/01/csharp%E6%B3%9B%E5%9E%8B/</guid><description>C# 泛型(Generics) 泛型概述 泛型是C#编程语言的一部分，它与程序集中的IL(Intermediate Language，中间语言)代码紧密的集成。通过泛型，我们不必给不同的类型编写功能相同的许多方</description></item><item><title>C#基础提升系列——C#委托</title><link>https://canw0916.github.io/posts/2023/01/csharp%E5%A7%94%E6%89%98/</link><pubDate>Sun, 29 Jan 2023 01:20:34 +0800</pubDate><author>火山</author><guid>https://canw0916.github.io/posts/2023/01/csharp%E5%A7%94%E6%89%98/</guid><description>委托是类型安全的类，它定义了返回类型和参数的类型，委托类可以包含一个或多个方法的引用。可以使用lambda表达式实现参数是委托类型的方法。 委托 当需要把一个方法作为参数传递给另一个方法时，就需要使用委托</description></item></channel></rss>